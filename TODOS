# Claudevzzz: GitHub Issue Assistant with Claude Code

A Docker-based web interface for using Claude Code to work on GitHub issues. This project allows you to browse issues, configure Claude agents to work on specific problems, and track their progress until they create pull requests or encounter roadblocks.

## Project Structure

```
claudevzzz/
├── Dockerfile
├── entrypoint.sh
├── server.js
├── package.json
└── public/
    └── index.html
```

## Files

### Dockerfile

```dockerfile
FROM ubuntu:latest

# Install dependencies
RUN apt-get update && apt-get install -y \
    curl git python3 python3-pip nodejs npm \
    && rm -rf /var/lib/apt/lists/*

# Install GitHub CLI
RUN curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
    && chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
    && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
    && apt-get update \
    && apt-get install -y gh

# Install Claude CLI
RUN pip3 install anthropic-claude-cli

# Set up work directory
WORKDIR /app

# Install Express and other needed packages
COPY package.json .
RUN npm install

# Copy application files
COPY . .

# Create data directory for agent workspaces
RUN mkdir -p /data/workspaces

# Expose port for web interface
EXPOSE 3000

# Entrypoint script to check auth and start web interface
RUN chmod +x /entrypoint.sh

ENTRYPOINT ["/entrypoint.sh"]
```

### package.json

```json
{
  "name": "claudevzzz",
  "version": "1.0.0",
  "description": "Web interface for Claude Code to work on GitHub issues",
  "main": "server.js",
  "scripts": {
    "start": "node server.js"
  },
  "dependencies": {
    "express": "^4.18.2",
    "body-parser": "^1.20.2",
    "simple-git": "^3.19.1"
  }
}
```

### entrypoint.sh

```bash
#!/bin/bash

# Check if GitHub is authenticated
if ! gh auth status &>/dev/null; then
  echo "GitHub CLI is not authenticated. Please run: gh auth login"
  GITHUB_AUTH_NEEDED=true
fi

# Check if Claude CLI is authenticated
if ! claude --version &>/dev/null; then
  echo "Claude CLI is not authenticated. Please run: claude login"
  CLAUDE_AUTH_NEEDED=true
fi

# If auth is needed, drop to a shell
if [ "$GITHUB_AUTH_NEEDED" = true ] || [ "$CLAUDE_AUTH_NEEDED" = true ]; then
  echo "Please authenticate the required services, then start the web interface with: npm start"
  exec bash
else
  echo "All services authenticated, starting web interface..."
  npm start
fi
```

### server.js

```javascript
const express = require('express');
const { exec, spawn } = require('child_process');
const fs = require('fs');
const path = require('path');
const app = express();
const port = 3000;

// Middleware
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(express.static('public'));

// Track active agents
const activeAgents = {};

// API: List GitHub issues
app.get('/api/issues', (req, res) => {
    const { repo } = req.query;
    
    if (!repo) {
        return res.status(400).json({ error: 'Repository is required' });
    }
    
    exec(`gh issue list --repo ${repo} --json number,title,state,labels`, (error, stdout, stderr) => {
        if (error) {
            return res.status(500).json({ error: stderr || error.message });
        }
        
        res.json(JSON.parse(stdout));
    });
});

// API: Get issue details
app.get('/api/issues/:number', (req, res) => {
    const { repo } = req.query;
    const { number } = req.params;
    
    if (!repo) {
        return res.status(400).json({ error: 'Repository is required' });
    }
    
    exec(`gh issue view ${number} --repo ${repo} --json number,title,body,labels,assignees`, (error, stdout, stderr) => {
        if (error) {
            return res.status(500).json({ error: stderr || error.message });
        }
        
        res.json(JSON.parse(stdout));
    });
});

// API: Generate agent configuration with Claude
app.post('/api/generate-config', (req, res) => {
    const { issue, configType } = req.body;
    
    if (!issue || !configType) {
        return res.status(400).json({ error: 'Issue and config type are required' });
    }
    
    // Build prompt for Claude to generate config
    const prompt = `Generate a ${configType} configuration for GitHub issue #${issue.number}: ${issue.title}
Issue description: ${issue.body}
Please create a configuration that would help an AI agent understand and fix this issue.`;
    
    exec(`claude "${prompt}"`, (error, stdout, stderr) => {
        if (error) {
            return res.status(500).json({ error: stderr || error.message });
        }
        
        res.json({ config: stdout });
    });
});

// API: Launch an agent for an issue
app.post('/api/launch-agent', (req, res) => {
    const { repo, issue, config, agentType } = req.body;
    
    if (!repo || !issue || !config || !agentType) {
        return res.status(400).json({ error: 'Repository, issue, config, and agent type are required' });
    }
    
    // Create workspace for the agent
    const workspaceId = `issue-${issue.number}-${Date.now()}`;
    const workspacePath = path.join('/data/workspaces', workspaceId);
    
    fs.mkdirSync(workspacePath, { recursive: true });
    fs.writeFileSync(path.join(workspacePath, 'config.json'), JSON.stringify(config));
    fs.writeFileSync(path.join(workspacePath, 'issue.json'), JSON.stringify(issue));
    
    // Command to run the Claude Code agent
    const agentCommand = `cd ${workspacePath} && gh repo clone ${repo} . && git checkout -b fix-issue-${issue.number} && claude code --config ./config.json`;
    
    // Launch the agent as a separate process
    const agentProcess = spawn('bash', ['-c', agentCommand], {
        detached: true,
        stdio: ['ignore', 
                fs.openSync(path.join(workspacePath, 'output.log'), 'w'),
                fs.openSync(path.join(workspacePath, 'error.log'), 'w')]
    });
    
    // Store the agent info
    activeAgents[workspaceId] = {
        pid: agentProcess.pid,
        issue: issue.number,
        started: new Date().toISOString(),
        status: 'running',
        workspace: workspacePath
    };
    
    // Don't wait for the process to finish
    agentProcess.unref();
    
    res.json({ 
        workspaceId,
        message: `Agent launched for issue #${issue.number}`
    });
});

// API: Check agent status
app.get('/api/agent/:workspaceId', (req, res) => {
    const { workspaceId } = req.params;
    
    if (!activeAgents[workspaceId]) {
        return res.status(404).json({ error: 'Agent not found' });
    }
    
    const agentInfo = activeAgents[workspaceId];
    
    // Check if the process is still running
    try {
        process.kill(agentInfo.pid, 0);
        // Process exists, still running
    } catch (e) {
        // Process no longer exists, agent has finished
        agentInfo.status = 'completed';
        
        // Check for pull request creation in output logs
        const outputLog = fs.readFileSync(path.join(agentInfo.workspace, 'output.log'), 'utf8');
        if (outputLog.includes('Pull request created')) {
            const prMatch = outputLog.match(/Pull request created: (https:\/\/github\.com\/.*\/pull\/\d+)/);
            if (prMatch) {
                agentInfo.pullRequestUrl = prMatch[1];
            }
        }
        
        // Check for roadblocks
        if (outputLog.includes('ROADBLOCK:')) {
            agentInfo.status = 'roadblock';
            const roadblockMatch = outputLog.match(/ROADBLOCK: (.*)/);
            if (roadblockMatch) {
                agentInfo.roadblock = roadblockMatch[1];
            }
        }
    }
    
    res.json(agentInfo);
});

// API: List all agents
app.get('/api/agents', (req, res) => {
    res.json(activeAgents);
});

// Start the server
app.listen(port, '0.0.0.0', () => {
    console.log(`Server running at http://0.0.0.0:${port}`);
});
```

### public/index.html

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Claudevzzz: GitHub Issue Assistant</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        .container {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
        }
        .panel {
            border: 1px solid #ccc;
            padding: 20px;
            border-radius: 5px;
            margin-bottom: 20px;
        }
        .issue-list {
            height: 400px;
            overflow-y: auto;
        }
        .issue-item {
            padding: 10px;
            border-bottom: 1px solid #eee;
            cursor: pointer;
        }
        .issue-item:hover {
            background-color: #f5f5f5;
        }
        .issue-details {
            white-space: pre-wrap;
        }
        textarea {
            width: 100%;
            height: 200px;
            margin-bottom: 10px;
        }
        button {
            padding: 10px 15px;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            margin-right: 10px;
        }
        .agent-list {
            margin-top: 20px;
        }
        .agent-item {
            padding: 10px;
            margin-bottom: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }
        .roadblock {
            background-color: #ffdddd;
        }
        .completed {
            background-color: #ddffdd;
        }
        pre {
            background-color: #f5f5f5;
            padding: 10px;
            border-radius: 4px;
            overflow-x: auto;
        }
    </style>
</head>
<body>
    <h1>Claudevzzz: GitHub Issue Assistant</h1>
    
    <div class="panel">
        <h2>Repository Settings</h2>
        <input type="text" id="repoInput" placeholder="owner/repo" style="width: 300px;">
        <button onclick="loadIssues()">Load Issues</button>
    </div>
    
    <div class="container">
        <div class="panel">
            <h2>Issues</h2>
            <div id="issueList" class="issue-list">
                <!-- Issues will be loaded here -->
            </div>
        </div>
        
        <div class="panel">
            <h2>Issue Details</h2>
            <div id="issueDetails" class="issue-details">
                <!-- Selected issue details will appear here -->
            </div>
            
            <div id="configPanel" style="display: none; margin-top: 20px;">
                <h3>Agent Configuration</h3>
                <select id="configType">
                    <option value="basic">Basic</option>
                    <option value="detailed">Detailed</option>
                    <option value="expert">Expert</option>
                </select>
                <button onclick="generateConfig()">Generate Config</button>
                
                <textarea id="configEditor"></textarea>
                
                <button onclick="launchAgent()">Launch Agent</button>
            </div>
        </div>
    </div>
    
    <div class="panel">
        <h2>Active and Completed Agents</h2>
        <button onclick="refreshAgents()">Refresh</button>
        <div id="agentList" class="agent-list">
            <!-- Agents will be listed here -->
        </div>
    </div>
    
    <script>
        let currentIssue = null;
        let currentRepo = '';
        
        async function loadIssues() {
            const repo = document.getElementById('repoInput').value;
            if (!repo) return;
            
            currentRepo = repo;
            
            try {
                const response = await fetch(`/api/issues?repo=${repo}`);
                const issues = await response.json();
                
                const issueList = document.getElementById('issueList');
                issueList.innerHTML = '';
                
                issues.forEach(issue => {
                    const issueItem = document.createElement('div');
                    issueItem.className = 'issue-item';
                    issueItem.textContent = `#${issue.number}: ${issue.title}`;
                    issueItem.onclick = () => loadIssueDetails(issue.number);
                    issueList.appendChild(issueItem);
                });
            } catch (error) {
                console.error('Error loading issues:', error);
                alert('Error loading issues. Make sure the repository exists and you have access to it.');
            }
        }
        
        async function loadIssueDetails(issueNumber) {
            try {
                const response = await fetch(`/api/issues/${issueNumber}?repo=${currentRepo}`);
                const issue = await response.json();
                
                currentIssue = issue;
                
                const issueDetails = document.getElementById('issueDetails');
                issueDetails.innerHTML = `
                    <h3>#${issue.number}: ${issue.title}</h3>
                    <p>${issue.body}</p>
                    <p><strong>Labels:</strong> ${issue.labels.map(l => l.name).join(', ')}</p>
                `;
                
                document.getElementById('configPanel').style.display = 'block';
            } catch (error) {
                console.error('Error loading issue details:', error);
            }
        }
        
        async function generateConfig() {
            if (!currentIssue) return;
            
            const configType = document.getElementById('configType').value;
            
            try {
                const response = await fetch('/api/generate-config', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        issue: currentIssue,
                        configType
                    })
                });
                
                const data = await response.json();
                document.getElementById('configEditor').value = data.config;
            } catch (error) {
                console.error('Error generating config:', error);
            }
        }
        
        async function launchAgent() {
            if (!currentIssue) return;
            
            const config = document.getElementById('configEditor').value;
            
            try {
                const response = await fetch('/api/launch-agent', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        repo: currentRepo,
                        issue: currentIssue,
                        config: JSON.parse(config),
                        agentType: 'claude-code'
                    })
                });
                
                const data = await response.json();
                alert(`Agent launched: ${data.message}`);
                refreshAgents();
            } catch (error) {
                console.error('Error launching agent:', error);
                alert('Error launching agent. Check if the configuration is valid JSON.');
            }
        }
        
        async function refreshAgents() {
            try {
                const response = await fetch('/api/agents');
                const agents = await response.json();
                
                const agentList = document.getElementById('agentList');
                agentList.innerHTML = '';
                
                Object.entries(agents).forEach(([id, agent]) => {
                    const agentItem = document.createElement('div');
                    agentItem.className = `agent-item ${agent.status}`;
                    
                    let agentHtml = `
                        <h3>Agent for Issue #${agent.issue}</h3>
                        <p><strong>Status:</strong> ${agent.status}</p>
                        <p><strong>Started:</strong> ${new Date(agent.started).toLocaleString()}</p>
                    `;
                    
                    if (agent.pullRequestUrl) {
                        agentHtml += `<p><strong>Pull Request:</strong> <a href="${agent.pullRequestUrl}" target="_blank">${agent.pullRequestUrl}</a></p>`;
                    }
                    
                    if (agent.roadblock) {
                        agentHtml += `<p><strong>Roadblock:</strong> ${agent.roadblock}</p>`;
                    }
                    
                    agentItem.innerHTML = agentHtml;
                    agentList.appendChild(agentItem);
                });
            } catch (error) {
                console.error('Error refreshing agents:', error);
            }
        }
        
        // Initial refresh
        refreshAgents();
    </script>
</body>
</html>
```

## Building and Running

### 1. Build the Docker Image

```bash
# Create the project directory structure as shown above
# Save all files with the provided content
# Then build the Docker image
docker build -t claudevzzz .
```

### 2. Create a Volume for Persistence

```bash
docker volume create claudevzzz-data
```

### 3. Run the Container

```bash
docker run -it --rm -p 3000:3000 -v claudevzzz-data:/data claudevzzz
```

### 4. First-Time Setup

When you first run the container, you'll need to authenticate:

1. GitHub CLI:
   ```bash
   gh auth login
   ```

2. Claude CLI:
   ```bash
   claude login
   ```

3. Start the web interface:
   ```bash
   npm start
   ```

The web interface will be available at `http://localhost:3000`.

## Usage Workflow

1. Enter a GitHub repository (format: `owner/repo`)
2. Browse and select an issue to work on
3. Generate a configuration for the Claude Code agent
4. Launch the agent to work on the issue
5. Monitor progress until a pull request is created or a roadblock is encountered

## Publishing the Container (Optional)

To share your container on Docker Hub:

```bash
docker login
docker tag claudevzzz yourusername/claudevzzz:latest
docker push yourusername/claudevzzz:latest
```
